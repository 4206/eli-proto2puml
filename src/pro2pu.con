/* TODO: syntax level 3 */

aaaroot: programs .

programs: program* .

program: proto_v2 | proto_v3 .

proto_v2: syntax_v2 proto_elem_v2* .
proto_v3: syntax_v3 proto_elem_v3* .

/* letters and digits, see pro2pu.gla */

/* identifiers, see their respective using productions */

/* integer literals, see: gla_int */

/* floating-point literals, see: ? */

/* boolean, see ? */

/* string literals, see: gla_cstring */

empty_statement: ';' .


constant: full_ident | gla_int | gla_float | gla_cstring ./* boolean implied in full_ident */


syntax_v2: 'syntax' '=' '"proto2"' ';' .
syntax_v3: 'syntax' '=' '"proto3"' ';' .

proto_elem_v2: import_stmt | package_stmt | option_stmt | top_level_def_v2 | empty_statement .
proto_elem_v3: import_stmt | package_stmt | option_stmt | top_level_def_v3 | empty_statement .


import_stmt: 'import' ('weak' | 'public' | ) &'DeferInput(GetCurrTok());'  gla_cstring ';' .


package_stmt: 'package' package_name ';' .
package_name: full_ident .

option_stmt: 'option' option_name '=' constant ';' .
option_name: (ident | ('(' full_ident ')') ) ('.' ident)* .

field_v2: label_v2 field_type field_name '=' field_number field_options ';' .
field_v3: label_v3 field_type field_name '=' field_number field_options ';' .

label_v2: 'required' | 'optional' | 'repeated' .
label_v3: 'repeated' | .

/* v2 only */
group_v2: label_v2 'group' group_name_v2 '=' field_number message_body_v2 .
group_name_v2: gla_upper . /* special ident */

oneof: 'oneof' oneof_name oneof_body .
oneof_name: ident .
oneof_body: '{' oneof_elem* '}' .
oneof_elem: oneof_field | empty_statement .
oneof_field: field_type field_name '=' field_number field_options ';' .

map_field: 'map' '<' map_key_type ',' map_val_type '>' map_name '=' field_number field_options ';' .
/*map_key_type: 'int32' | 'int64' | 'uint32' | 'uint64' | 'sint32' | 'sint64' | 'fixed32' | 'fixed64' | 'sfixed32' | 'sfixed64' | 'bool' | 'string' .*/
map_key_type: integral_type | string_type .
map_val_type: field_type .
map_name: ident .



/* v2 only */
extensions_v2: 'extensions' ranges ';' .

reserved: 'reserved' (ranges | reserved_field_names) ';' .

ranges: range (',' range)* .
range: gla_int .
/*range: gla_int 'to' (gla_int | 'max') . /* 'to' is also used as ident */
range: gla_int gla_kwd_to (gla_int | 'max') .

/** CAVEAT: specification contradictory;
 * example given in specification contradicts grammar.
 * https://developers.google.com/protocol-buffers/docs/reference/proto2-spec#reserved
 * grammar:
 *   fieldNames = fieldName { "," fieldName }
 *   fieldName = ident
 *  example:
 *   reserved 2, 15, 9 to 11;
 *   reserved "foo", "bar";
 *
 * Grammar below will accept the example:
 */
reserved_field_names: field_name_or_string (',' field_name_or_string)* .
field_name_or_string:  field_name | gla_cstring .



enum_v2: 'enum' enum_name enum_body_v2 .
enum_name : ident .
enum_body_v2: '{' enum_elem_v2* '}' .
enum_elem_v2: option_stmt | enum_field | empty_statement .
enum_field: enum_field_name '=' enum_number enum_field_options ';' .

/* identical, but enum kwd messes up c syntax highlight */
enum_v3: 'enum' enum_name enum_body_v3 .
enum_body_v3: '{' enum_elem_v3* '}' .
enum_elem_v3: option_stmt | enum_field | empty_statement .

enum_field_name: ident .
enum_number: gla_int .

enum_field_options: .
enum_field_options: '[' enum_value_option (',' enum_value_option)* ']' .
enum_value_option: option_name '=' constant .


message_v2: 'message' message_name message_body_v2 .
message_name : ident .
message_body_v2: '{' message_elem_v2* '}' .
message_elem_v2: field_v2 .
message_elem_v2: enum_v2 | message_v2 . 
message_elem_v2: extend_v2 | extensions_v2 | group_v2 . /* v2 only */
message_elem_v2: option_stmt | oneof | map_field | reserved | empty_statement .

message_v3: 'message' message_name message_body_v3 .
message_body_v3: '{' message_elem_v3* '}' .
message_elem_v3: field_v3 .
message_elem_v3: enum_v3 | message_v3 .
message_elem_v3: option_stmt | oneof | map_field | reserved | empty_statement .


/* v2 only; NOTE: message_type refers to defined message_name'ss */
extend_v2: 'extend' message_type2 extend_body_v2 .
extend_body_v2: '{' extend_elem_v2* '}' .
extend_elem_v2: field_v2 | group_v2 | empty_statement .


service_v2: 'service' service_name service_body_v2 .
service_name: ident.
service_body_v2: '{' service_elem_v2* '}' .
service_elem_v2: option_stmt | rpc | stream_v2 | empty_statement .

service_v3: 'service' service_name service_body_v3 .
service_body_v3: '{' service_elem_v3* '}' .
service_elem_v3: option_stmt | rpc | empty_statement .

rpc: 'rpc' rpc_name '(' opt_kwd_stream message_type2 ')' 'returns' '(' opt_kwd_stream
message_type2 ')' opt_rpc_body .
opt_kwd_stream: 'stream' | .
rpc_name: ident .

opt_rpc_body: ';' .
opt_rpc_body: '{' rpc_elem* '}' .
rpc_elem: option_stmt | empty_statement .

/* v2 only */
stream_v2: 'stream' stream_name '(' message_type2 ',' message_type2 ')' opt_stream_body_v2 .
stream_name: ident .

opt_stream_body_v2: ';' .
opt_stream_body_v2: '{' stream_elem_v2* '}' .
stream_elem_v2: option_stmt | empty_statement .


/* proto file, see top of this file */


top_level_def_v2: message_v2 | enum_v2 | service_v2 .
top_level_def_v2: extend_v2 .
top_level_def_v3: message_v3 | enum_v3 | service_v3 .

integral_type: 'int32' | 'int64' | 'uint32' | 'uint64' | 'sint32' | 'sint64' | 'fixed32' | 'fixed64' | 'sfixed32' | 'sfixed64' | 'bool' .
string_type:  'string' .
float_type: 'double' | 'float' .
bytes_type: 'bytes' .

field_type: float_type | integral_type | string_type | bytes_type .
/*field_type: 'double' | 'float' | 'int32' | 'int64' | 'uint32' | 'uint64'
      | 'sint32' | 'sint64' | 'fixed32' | 'fixed64' | 'sfixed32' | 'sfixed64'
      | 'bool' | 'string' | 'bytes' .*/
field_type: message_or_enum_type2 . /* message_type2 | enum_type */

field_name: ident .
field_number: gla_int .

field_options: . /* may be empty */
field_options: '[' field_option_kvs ']' .
field_option_kvs: field_option_kv (',' field_option_kv)* .
field_option_kv: option_name '=' constant .



message_type2: dot_or_not (ident '.')* message_name .
/* not LALR with both message_type and enum_type productions */
/*enum_type:    dot_or_not (ident '.')* enum_name .*/

message_or_enum_type2: dot_or_not (ident '.')* message_name .

dot_or_not: '.' | .


ident: gla_upper | gla_lower .
ident: gla_kwd_to . /* quickhack */
full_ident: ident              .
full_ident: ident full_ident_tl .
full_ident_tl: '.' ident              .
full_ident_tl: '.' ident full_ident_tl .
