@=~
~p maximum_input_line_length = infinity
~p maximum_output_line_length = infinity

Use import statements to enqueue files for appending at the
end of the input stream.
Remembers visited files and does not include them again.

Note: provides an overriding implementation of auxEOF,
see auxEOF in: http://eli-project.sourceforge.net/elionline/lex_1.html#SEC8

~O~<ImportDefer.head~>==~{
#include "ImportDefer.h"

~}

~O~<ImportDefer.h~>==~{
#ifndef IMPORT_DEFER_H
#define IMPORT_DEFER_H

/** request a filename for including at the bottom of the current input */
extern void DeferInput(char* filename);

#endif // IMPORT_DEFER_H

~}

~O~<ImportDefer.clp~>==~{
IncludeDir "-I" "--include=" joinedto strings "Include directory imports";
/* use CLP_InputFile to access input filename, see: http://eli-project.sourceforge.net/elionline/clp_4.html#SEC21 */
~}

~O~<ImportDefer.c~>==~{
#include "ImportDefer.h"

#include <stdlib.h>
#include <stdio.h>
#include <string.h>
#include "Include.h"
#include <unistd.h> // getcwd

#include "source.h"
#include "csm.h"
#include "gla.h"
#include "CoordMap.h"
#ifdef MONITOR
#include "dapto.h"
#include "dapto_dapto.h"
#endif

// clp processing
#include "csm.h"
#include "clp.h"

// import LineNum
#include "err.h"

#include <sys/stat.h>

//#define PDEBUG(X) X
#define PDEBUG(X) 

typedef struct ImportRequest {
  int visited;
  const char* filename;
  struct ImportRequest* next;
} ImportRequest;

/** static field **/
ImportRequest* import_requests = 0;

char** import_dirs;
int n_import_dirs;

// forward declarations
int absolutify_include_paths(DefTableKeyList includeDir, char** idirs);
const char* find_in_include_path(const char* filename, char** idirs, int ndirs);

void init_import_requests()
{
  if (!import_requests)
  {
    PDEBUG(printf("start at %s\n",StringTable(1)));
    ImportRequest* start = (ImportRequest*)malloc(sizeof(ImportRequest));
    start->visited = 1;
    start->filename = StringTable(GetClpValue(CLP_InputFile,0)); // note: StringTable(1) does not work with subdirectories!
    start->next = 0;
    import_requests = start;

    n_import_dirs = absolutify_include_paths(IncludeDir, import_dirs);
  }
}


/** DeferInput collects filenames in the parser
 * (call '&DeferInput();' within a .con rule.
 * DeferInput must remember the cwd (current working directory),
 * from which a filename was requested for input,
 * because cwd may change when combining multiple input dir (-I)
 * with relative paths in the import statement */
void DeferInput(char* filename)
{
  PDEBUG(fprintf(stderr,"DeferImport(%s)\n", filename));

  // check if queue is initialized
  init_import_requests();

  // trim quotes
  int len = strlen(filename);
  if (len < 1) return;  // ignore empty filenames

  // trim double quote characters around the filename
  char* trimmed;
  if (filename[0] == '"' && filename[len-1] == '"')
  { trimmed = (char*)malloc((len-1)*sizeof(char)); // trim by 2, add 1 byte for terminator
    strncpy(trimmed, filename+1, len-2);
    trimmed[len-2] = 0;
  }
  else
  { trimmed = filename; }

  // TODO: store CWD
  char cwd[1024]; // limited by os
  getcwd(cwd, sizeof(cwd));
  fprintf(stderr,"Working dir of process: %s\n", cwd);
  // TODO: get directory of currently included file

  const char* included_by = MapFile(LineNum);
  fprintf(stderr,"included by '%s'\n", included_by);

  fprintf(stderr,"filename '%s'\n",trimmed);
  

  // build absolute path and locate file
  struct stat st;
  if (0 != stat(trimmed, &st))
  {
    // file exists
    fprintf(stderr, "file is NOT present in cwd\n");

    const char* abs_path = find_in_include_path(trimmed, import_dirs, n_import_dirs);
    if (0 == abs_path)
    {
      fprintf(stderr, "file is NOT present in include path\n");      
    }
    else
    {
      fprintf(stderr, "file found at '%s'\n", abs_path);
    }

  }
  else
  {
    fprintf(stderr, "file is present\n");
  }

  fprintf(stderr,"\n");

  //fprintf(stderr,"LineNum=%d, MapFile=%s\n", LineNum, included_by);
  // TODO: strip filename at the end
  // TODO: prepend cwd
  // TODO: store with queue request

  // check if already requested
  ImportRequest* r = import_requests;
  for (; r; r=r->next)
  { 
    if (0 == strcmp(trimmed, r->filename))
    { return; }  // skip files already requested

    if (! r->next) break; // advance pointer only until last valid element
  }
  
  // postcondition: r now points to the last item in the queue

  // create new struct for storing filename and 'visited' flag
  ImportRequest* new = (ImportRequest*)malloc(sizeof(ImportRequest));
  new->visited = 0;
  new->filename = trimmed;
  new->next = 0;

  
  r->next = new;  // append to tail

  PDEBUG(fprintf(stderr,"registered '%s' for import\n", trimmed));
  PDEBUG(fprintf(stderr,"\n"));
  //NextImport();
}


const char* NextImport()
{
  char cwd[1024]; // limited by os
  //chdir("/path/to/change/directory/to");
  getcwd(cwd, sizeof(cwd));
  PDEBUG(printf("Current working dir: %s\n", cwd));


  PDEBUG(printf("loading next import\n"));
  for (ImportRequest* r=import_requests; r; r=r->next)
  {
    PDEBUG(printf("looking at import '%s'...", r->filename));
    if (r->visited)
    {
      PDEBUG(printf("already loaded\n"));
      continue;
    }
    PDEBUG(printf("loading..."));
    const char* path = r->filename;

//TODO: track visited list based on full qualified paths names,
//in order to avoid multiple imports when using relative paths in import statement.

    r->visited = 1; // mark as seen
    return path;
    //int success = NewInput((char*)path);
    //printf("%s\n", success ? "ok" : "failed");
    //break;
  }
  // all loaded
  return 0;
}

/** returns the number of IncludeDir's
 *  after call, idirs points to an array of strings storing the absolute include paths
 */
int absolutify_include_paths(DefTableKeyList includeDir, char** idirs)
{
  int res = LengthDefTableKeyList(IncludeDir);
  idirs = (char**)malloc(res*sizeof(char*)); // allocate array (not the strings within)

  // get cwd
  char cwd[1024]; // limited by os
  getcwd(cwd, sizeof(cwd));
  int cwd_len = strlen(cwd);

  char* include_path, *abs_path;
  int abs_len;
  int i = 0;
  for (DefTableKeyList list= includeDir; list; list= TailDefTableKeyList(list), i++)
  {
    include_path = StringTable(GetClpValue(HeadDefTableKeyList(list), 0));
    abs_len = cwd_len + strlen(include_path) + 2;   // +1 separator, +1 terminator
    abs_path = (char*)malloc(abs_len*sizeof(char)); // allocate ith buffer
    snprintf(abs_path, abs_len, "%s/%s", cwd, include_path); // concat and write to buffer
    idirs[i] = abs_path;                            // link buffer to array
  }
  return res;
}

const char* find_in_include_path(const char* suf_path, char** idirs, int ndirs)
{
  int suf_len = strlen(suf_path);
fprintf(stderr,"1\n");
  char* pre_path;
  int pre_len, abs_len;
  //for (DefTableKeyList list= IncludeDir; list; list= TailDefTableKeyList(list))
  for (int i=0; i<ndirs; i++)
  {
fprintf(stderr,"2\n");
    // build absolute path
    //pre_path = StringTable(GetClpValue(HeadDefTableKeyList(list), 0));
    pre_path = idirs[i];
fprintf(stderr,"21\n");
    pre_len = strlen(pre_path);
    abs_len = pre_len + suf_len + 2; // +1 for separator, +1 for 0-terminator
    char abs_path[abs_len];          // allocate on stack
    int byteswritten = snprintf( abs_path, abs_len, "%s/%s", pre_path, suf_path ); 
    // check if snprintf succeeded
    if (byteswritten + 1 != abs_len)
    { fprintf(stderr, "Failed to compose path %s/%s\n", pre_path, suf_path );
      continue;
    }
fprintf(stderr,"4\n");
    // check if file exists
    struct stat st;
    if (0 != stat(abs_path, &st)) continue;
    
    // file exists, allocate result on heap
    char* res = (char*)malloc(abs_len*sizeof(char));
    res[0] = 0; // initialize buffer terminator for strncat
    return strncat( res, abs_path, abs_len );
  }
  return 0;  
}


int try_open(const char *path, int oflags)
{
  int descr;
  descr = open (path, oflags);
  if (descr >= 0) return descr;

  int path_len = strlen(path);

  char cwd[1024]; // limited by os
  //chdir("/path/to/change/directory/to");
  getcwd(cwd, sizeof(cwd));
  PDEBUG(printf("Current working dir: %s\n", cwd));


  // try to open pathname relative to include directories
  char* pre_path, *full_path;
  int prefix_len, full_len;
  for (DefTableKeyList list=IncludeDir; list; list=TailDefTableKeyList(list))
  {
    PDEBUG(printf("0\n"));
    pre_path = StringTable(GetClpValue(HeadDefTableKeyList(list), 0));
    prefix_len = strlen(pre_path);
    full_len = prefix_len + path_len + 2;
    full_path = (char*)malloc(full_len*sizeof(char)); // add separator and terminator
    int byteswritten = snprintf(full_path, full_len, "%s/%s", pre_path, path);
    if (byteswritten + 1 != full_len)
    { fprintf(stderr, "Failed to allocate path %s/%s\n", pre_path, path);
      free(full_path);
      continue;
    }
    PDEBUG(printf(">1%s<\n", full_path));
    descr = open (full_path, oflags);
    PDEBUG(printf(">2%s<%d\n", full_path, descr));
    //free(full_path);
    PDEBUG(printf(">3%s<%d\n", full_path, descr));
    if (descr >= 0)
    { PDEBUG(printf("3x\n"));
     return descr;
    }
    PDEBUG(printf("4\n"));
  }
  PDEBUG(printf("5\n"));
  //return 0; // default to stdin
  return -1;
}

/** override empty default implementation.
 * Load */
#if defined(__cplusplus) || defined(__STDC__)
char *auxEOF(char *start, int length)
#else
char *auxEOF(start, length) char *start; int length;
#endif
{
  const char* name = NextImport(); // return value 0 signals end-of-queue
  fprintf(stderr, "OPEN %s\n",name);
  if (name == 0) return start;

  int descr;
  descr = try_open (name, 0);
  if (descr < 0)
  {
    fprintf(stderr, "Failed to open file '%s'\n", name);
    return start;
  }

  initBuf(name, descr);
  AddBreak(name, 1);
#ifdef MONITOR
  _dapto_source_changed (name, 1, LineNum, 1, 1, 1);
#endif

  TokenEnd = TEXTSTART;
  StartLine = TokenEnd - 1;
  return TEXTSTART;
}

~}
