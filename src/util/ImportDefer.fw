@=~
~p maximum_input_line_length = infinity
~p maximum_output_line_length = infinity

Use import statements to enqueue files for appending at the
end of the input stream.
Remembers visited files and does not include them again.

auxEOF is overridden by this package,
as recommended in: http://eli-project.sourceforge.net/elionline/lex_1.html#SEC8

~O~<ImportDefer.specs~>==~{
ropes.fw
~}

~O~<ImportDefer.head~>==~{
#include "ImportDefer.h"

~}

~O~<ImportDefer.h~>==~{
#ifndef IMPORT_DEFER_H
#define IMPORT_DEFER_H

/** request a filename for including at the bottom of the current input */
extern void DeferInput(char* filename);

#endif // IMPORT_DEFER_H

~}

~O~<ImportDefer.clp~>==~{
IncludeDir "-I" "--include=" joinedto strings "Include directory imports";
/* use CLP_InputFile to access input filename, see: http://eli-project.sourceforge.net/elionline/clp_4.html#SEC21 */
~}

~O~<ImportDefer.c~>==~{
#include "ImportDefer.h"

#include <stdlib.h>
#include <stdio.h>
#include <string.h>
#include "Include.h"
#include <unistd.h> // getcwd

#include "source.h"
#include "csm.h"
#include "gla.h"
#include "CoordMap.h"
#ifdef MONITOR
#include "dapto.h"
#include "dapto_dapto.h"
#endif

// clp processing
#include "csm.h"
#include "clp.h"

// import LineNum
#include "err.h"

#include <sys/stat.h>

#include "ropes.h"

//#define PDEBUG(X) X
#define PDEBUG(X) 
#define PDEBUG2(X)

#define CWD_BUFSIZE 1024

typedef struct ImportRequest {
  int visited;
  const char* filename;
  struct ImportRequest* next;
} ImportRequest;

/** static field **/
ImportRequest* import_requests = 0;

char** import_dirs;
int n_import_dirs;

// forward declarations
char** absolutify_include_paths(DefTableKeyList includeDir, int* ndirs);
char* find_in_include_path(const char* filename, char** idirs, int ndirs);

void init_import_requests()
{
  if (!import_requests)
  {
    PDEBUG(printf("start at %s\n",StringTable(1)));
    ImportRequest* start = (ImportRequest*)malloc(sizeof(ImportRequest));
    start->visited = 1;
    start->filename = StringTable(GetClpValue(CLP_InputFile,0)); // note: StringTable(1) does not work with subdirectories!
    start->next = 0;
    import_requests = start;

    import_dirs = absolutify_include_paths(IncludeDir, &n_import_dirs);
  }
}

/** DeferInput collects filenames in the parser
 * (call '&DeferInput();' within a .con rule.
 * DeferInput must remember the cwd (current working directory),
 * from which a filename was requested for input,
 * because cwd may change when combining multiple input dir (-I)
 * with relative paths in the import statement */
void DeferInput(char* filename)
{
  PDEBUG(fprintf(stderr,"DeferImport(%s)\n", filename));

  // check if queue is initialized
  init_import_requests();

  // trim quotes
  int len = strlen(filename);
  if (len < 1) return;  // ignore empty filenames

  // trim double quote characters around the filename
  char* trimmed;
  if (filename[0] == '"' && filename[len-1] == '"')
  { trimmed = (char*)malloc((len-1)*sizeof(char)); // -2 "" trim, +1 terminator
    strncpy(trimmed, filename+1, len-2);
    trimmed[len-2] = 0;
  }
  else
  { trimmed = filename; }

  // locate file and build absolute path
  // 1. if the filename is absolute, load it or fail
  // 2. attempt to locate included file relative to including file
  // 3. attempt to locate included file in cwd
  // 4. attempt to locate included file in include dir
  struct stat st;
  char* abs_path;
  do 
  {
    // 1. check if file is absolute
    if (startswith(trimmed, "/"))
    {
      if (0 == stat(trimmed, &st)) // on success, 0 is returned
      {
        abs_path = trimmed;
        break; // goto end
      }
      else
      { 
        fprintf(stderr, "Warning: absolute include file not found: %s\n", trimmed);
        return; // skip further checks
      }
    }


    // 2. check if file is in path relative to including file
    const char* included_by_file = MapFile(LineNum);  
    {
      // 2.1 make included-by path absolute
      char* included_by_path;
      if (startswith(included_by_file, "/"))
      {
        int inc_len = strlen(included_by_file);
        included_by_path = (char*)malloc(inc_len*sizeof(char));
        strncpy( included_by_path, included_by_file, inc_len );
      }
      else
      {
        char cwd[CWD_BUFSIZE];
        getcwd(cwd, sizeof(cwd));
        int cwd_len = strlen(cwd);
        int inc_len = cwd_len + strlen(included_by_file) + 2; // +1 sep, +1 term
        included_by_path = (char*)malloc(inc_len*sizeof(char));
        snprintf( included_by_path, inc_len, "%s/%s", cwd, included_by_file );
      }


      char* included_by_suffix = strrchr(included_by_path, '/'); // returns NULL if separator not found
      if (!included_by_suffix)
      {
        fprintf(stderr, "Warning: included-by file is not a path: %s\n", included_by_path);
      }
      else
      {
        int pre_len = included_by_suffix - included_by_path;
        int abs_len = pre_len + strlen(trimmed) + 2; // +1 separator, +1 terminator
        abs_path = (char*)malloc(abs_len*sizeof(char));
        abs_path[0] = 0;
        strncat( abs_path, included_by_path, pre_len );
        strncat( abs_path, "/", 1 );
        strncat( abs_path, trimmed, strlen(trimmed) );
        
        if (0 == stat(abs_path, &st))
        {
          free(included_by_path);
          free(trimmed); // safe to free because we copied trimmed into abs_path
          break;
        }
        else
        {
          free(included_by_path);
          free(abs_path); // remove buffer created above
        }
      }
    }
    
    // 3. check if file in in cwd
    if (0 == stat(trimmed, &st))
    {
      char cwd[CWD_BUFSIZE];
      getcwd(cwd, sizeof(cwd));
      int abs_len = strlen(cwd) + strlen(trimmed) + 2; // +1 separator, +1 terminator
      abs_path = (char*)malloc(abs_len*sizeof(char));
      snprintf( abs_path, abs_len, "%s/%s", cwd, trimmed );
      free(trimmed); // safe to free because we copied trimmed
      break; // goto end
    }

    // 4. check if file is in absolute path
    char* abs_path_from_includes = find_in_include_path(trimmed, import_dirs, n_import_dirs);
    if (0 != abs_path_from_includes)
    {
      free(trimmed); // safe to free because find_in_include_path copied trimmed
      abs_path = abs_path_from_includes;
      break; // goto end
    }

    // warn that file does not exist
    fprintf(stderr, "Warning: File not found: '%s'; included from '%s'\n", trimmed, included_by_file);
      
  } while(0);

  PDEBUG2(fprintf(stderr, "abs_path=%s\n\n",abs_path));

  // check if already requested
  ImportRequest* r = import_requests;
  for (; r; r=r->next)
  { 
    if (0 == strcmp(abs_path, r->filename))
    { return; }  // skip files already requested

    if (! r->next) break; // don't advance pointer beyond last element
  }
  
  // postcondition: r now points to the last item in the queue

  // create new struct for storing filename and 'visited' flag
  ImportRequest* new = (ImportRequest*)malloc(sizeof(ImportRequest));
  new->visited = 0;
  new->filename = abs_path;
  new->next = 0;

  
  r->next = new;  // append to tail

  PDEBUG(fprintf(stderr,"registered '%s' for import\n", trimmed));
  PDEBUG(fprintf(stderr,"\n"));
  //NextImport();
}


const char* NextImport()
{
  char cwd[1024]; // limited by os
  //chdir("/path/to/change/directory/to");
  getcwd(cwd, sizeof(cwd));
  PDEBUG(printf("Current working dir: %s\n", cwd));


  PDEBUG(printf("loading next import\n"));
  for (ImportRequest* r=import_requests; r; r=r->next)
  {
    PDEBUG(printf("looking at import '%s'...", r->filename));
    if (r->visited)
    {
      PDEBUG(printf("already loaded\n"));
      continue;
    }
    PDEBUG(printf("loading..."));
    const char* path = r->filename;

//TODO: track visited list based on full qualified paths names,
//in order to avoid multiple imports when using relative paths in import statement.

    r->visited = 1; // mark as seen
    return path;
    //int success = NewInput((char*)path);
    //printf("%s\n", success ? "ok" : "failed");
    //break;
  }
  // all loaded
  return 0;
}

/** returns the number of IncludeDir's
 *  after call, idirs points to an array of strings storing the absolute include paths
 */
char** absolutify_include_paths(DefTableKeyList includeDir, int* ndirs)
{
  *ndirs = LengthDefTableKeyList(IncludeDir);
  char** idirs = (char**)malloc(*ndirs*sizeof(char*)); // allocate array (not the strings within)
  // get cwd
  char cwd[1024]; // limited by os
  getcwd(cwd, sizeof(cwd));
  int cwd_len = strlen(cwd);

  char* include_path, *abs_path;
  int abs_len;
  int i = 0;
  for (DefTableKeyList list= includeDir; list; list= TailDefTableKeyList(list), i++)
  {
    include_path = StringTable(GetClpValue(HeadDefTableKeyList(list), 0));
    abs_len = cwd_len + strlen(include_path) + 2;            // +1 separator, +1 terminator
    abs_path = (char*)malloc(abs_len*sizeof(char));          // allocate ith buffer
    snprintf(abs_path, abs_len, "%s/%s", cwd, include_path); // concat and write to buffer
    idirs[i] = abs_path;                                     // link buffer to array
  }
  return idirs;
}

char* find_in_include_path(const char* suf_path, char** idirs, int ndirs)
{
  int suf_len = strlen(suf_path);
  char* pre_path;
  int pre_len, abs_len;
  //for (DefTableKeyList list= IncludeDir; list; list= TailDefTableKeyList(list))
  for (int i=0; i<ndirs; i++)
  {
    // build absolute path
    //pre_path = StringTable(GetClpValue(HeadDefTableKeyList(list), 0));
    pre_path = idirs[i];
    pre_len = strlen(pre_path);
    abs_len = pre_len + suf_len + 2; // +1 for separator, +1 for 0-terminator
    char abs_path[abs_len];          // allocate on stack
    int byteswritten = snprintf( abs_path, abs_len, "%s/%s", pre_path, suf_path ); 
    // check if snprintf succeeded
    if (byteswritten + 1 != abs_len)
    { fprintf(stderr, "Failed to compose path %s/%s\n", pre_path, suf_path );
      continue;
    }

    // check if file exists
    struct stat st;
    if (0 != stat(abs_path, &st)) continue;
    
    // file exists, allocate result on heap
    char* res = (char*)malloc(abs_len*sizeof(char));
    res[0] = 0; // initialize buffer terminator for strncat
    return strncat( res, abs_path, abs_len );
  }
  return 0;  
}

/** override empty default implementation for auxEOF */
#if defined(__cplusplus) || defined(__STDC__)
char *auxEOF(char *start, int length)
#else
char *auxEOF(start, length) char *start; int length;
#endif
{
  const char* name = NextImport(); // return value 0 signals end-of-queue
  PDEBUG2(fprintf(stderr, "OPEN %s\n",name));
  if (name == 0) return start;

  int descr;
  descr = open (name, 0);
  if (descr < 0)
  {
    fprintf(stderr, "Failed to open file '%s'\n", name);
    return start;
  }

  initBuf(name, descr);
  AddBreak(name, 1);
#ifdef MONITOR
  _dapto_source_changed (name, 1, LineNum, 1, 1, 1);
#endif

  TokenEnd = TEXTSTART;
  StartLine = TokenEnd - 1;
  return TEXTSTART;
}

~}
