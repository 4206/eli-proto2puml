/* use +-- to represent nested classes */
/* TODO: add testcase for name collisions on nested messages */
/* TODO: report coords of previous definition */
/* TODO: do not NOTE about types which are qualified on use site */
/* DONE: insert source comment into generated puml */
/* DONE: store package name with type definition */
/* DONE: check if qualified typename at use site consists of packagen-name "." typename */
/* TODO: what about multiple usages of the same type per message? - remove duplicate edges?  */
/* DONE: 'to' is a keyword in ranges, make available as an identifier */
/* DONE: fully qualify class / type names */
/* TODO: add note to PUML if there have been errors parsing .proto */
/* DONE: syntax level 3 */
/* TODO: collect groups -> ignored */
/* DONE: collect oneof  */
/* DONE: collect map    */
/* DONE: remove package if no package is given */
/* TODO: clp for include directories */
/* DONT: collect depedencies between imported packages */
/* TODO: replace add in SYMBOL ProtoDoc
 * ---> can there be multiple packages per file? --> print error
 * ---> what if file has multiple packages
 * ---> move packageless into "default" package */
/* DONE: collect type name */
/* TODO: test type name collection with dotted type names */
/* TODO: move relations to end of puml file */

/* W S L */

/**********/

CHAIN puml_ptg_chn: PTGNode;             /* collect message / enum decls */
CHAIN puml_fields_ptg_chn: PTGNode;      /* collect fields within decls */
CHAIN puml_relations_ptg_chn: PTGNode;   /* collect nesting relations */ 
CHAIN puml_relations_ptg_chn2: PTGNode;   /* collect nesting relations */ 
CHAIN custom_types_env_chn: Environment; /* collect type names */
CHAIN qualified_classname_ptg_chn: PTGNode; /* pass down segments for qualified pathname */
CHAIN qualified_classname_sym_chn: int;  /* segments for qualified pathname */

CLASS SYMBOL ROOTCLASS: no: int SYNT;
CLASS SYMBOL ROOTCLASS: ptgnull: PTGNode SYNT;
CLASS SYMBOL ROOTCLASS: custom_types: Environment SYNT;
CLASS SYMBOL ROOTCLASS COMPUTE

  /* start collecting uml lines */
  CHAINSTART HEAD.puml_ptg_chn = PTGNULL;
  CHAINSTART HEAD.puml_fields_ptg_chn = PTGNULL;
  CHAINSTART HEAD.puml_relations_ptg_chn = PTGNULL;
  CHAINSTART HEAD.puml_relations_ptg_chn2 = PTGNULL;
  /* print collected uml lines */
  PTGOut(
    PTGPUML(
      PTGNlSeq( TAIL.puml_ptg_chn, PTGNlSeq( TAIL.puml_relations_ptg_chn, TAIL.puml_relations_ptg_chn2 ) )
  ));

  %// each of those will segfault
  /*PTGOut( CONSTITUENTS contributesRelation.contrib_relation_ptg WITH (PTGNode,PTGNlSeq,IDENTICAL,ZERO) );*/
  /*PTGOut( CONSTITUENTS contributesField.field_relation_ptg WITH (PTGNode,PTGNlSeq,IDENTICAL,ZERO) );*/
  /*PTGOut( CONSTITUENTS contributesSubclass.subclass_relation_ptg WITH (PTGNode,PTGNlSeq,IDENTICAL,ZERO) );*/


  /** TODO: collect full qualified path instead of just the name */
  CHAINSTART HEAD.custom_types_env_chn = NewEnv();
  SYNT.custom_types = TAIL.custom_types_env_chn;

  SYNT.no = 0;
  SYNT.ptgnull = PTGNULL;

  /*dump_env_keys(THIS.custom_types);*/
END;

SYMBOL ProtoDoc: package_name: int SYNT;
SYMBOL ProtoDoc COMPUTE
  SYNT.puml_ptg_chn = PTGNlSeq(THIS.puml_ptg_chn,
                      PTGNlSeq(PTGSourceFile(MapFile(LineNum)), /* TODO: this is broken */
                      PTGNlSeq(%// wrap into package only if there is a package name given
                               IF ( THIS.package_name %// is not null
                                  , PTGPackage( CONSTITUENTS Package.name WITH (int,ior_package,IDENTICAL,ZERO)
                                              , TAIL.puml_ptg_chn )
                                  , PTGNoPackage( TAIL.puml_ptg_chn )
                                  )
                              , PTGNULL /*TAIL.puml_relations_ptg_chn*/
                              )));

  HEAD.puml_ptg_chn = PTGNULL;
  HEAD.puml_fields_ptg_chn = PTGNULL;
  %//HEAD.puml_relations_ptg_chn = PTGNULL; %// propagate all relations through the end of puml file

  %// pull up package name to document root
  SYNT.package_name = CONSTITUENTS Package.name WITH (int,ior_package,IDENTICAL,ZERO);

  %// hand down type qualifier, start with package name
  CHAINSTART HEAD.qualified_classname_ptg_chn = IF( THIS.package_name, PTGId(THIS.package_name), PTGNULL );
  CHAINSTART HEAD.qualified_classname_sym_chn = THIS.package_name;
END;

CLASS SYMBOL hasName: name: int SYNT;
SYMBOL Package INHERITS hasName END;
SYMBOL Message INHERITS hasName END;
SYMBOL Enum    INHERITS hasName END;
SYMBOL OneOf   INHERITS hasName END;


RULE rPackage: Package ::= PackageName COMPUTE
  Package.name = PackageName.sym;
END;
SYMBOL Package COMPUTE
  /*SYNT.puml_ptg_chn = PTGPackage(CONSITUTENT PackageName.sym, TAIL.puml_ptg_chn);*/

  /*TODO: handle multiple packages and imports */
  /*HEAD.puml_relations_ptg_chn = PTGNULL;*/  
END;


CLASS SYMBOL qualifiedName: yes: int SYNT;
CLASS SYMBOL qualifiedName: qualified_name_ptg: PTGNode SYNT;
CLASS SYMBOL qualifiedName: qualified_name_sym: int SYNT;
CLASS SYMBOL qualifiedName: subclass_relation_ptg: PTGNode SYNT;
CLASS SYMBOL qualifiedName COMPUTE
  /*SYNT.qualified_name_ptg = PTGDotSeq(THIS.qualified_classname_ptg_chn, PTGId(THIS.name));*/
  %// plantuml can handle only 1 hierarchy level; nested messages/classes are prefixed with $
  %// to identify nesting depth, look upwards the hierarchy, if we're already inside a message or enum
  %// only the classname at the lowest level (THIS.name) is used for display
  SYNT.qualified_name_ptg = PTGSeq3(THIS.qualified_classname_ptg_chn
                                   , IF( INCLUDING (qualifiedName.yes, Extend.yes, ROOTCLASS.no)
                                       , PTGAsIs("$")
                                       , PTGAsIs("."))
                                   , PTGId(THIS.name));

  SYNT.qualified_name_sym = concat_id_with_dot( THIS.qualified_classname_sym_chn, THIS.name );

  %// refine class scope (although plantuml can handle only 1 level of scopes, we just hide the hierarchy)
  HEAD.qualified_classname_ptg_chn = THIS.qualified_name_ptg;          %// pass down
  SYNT.qualified_classname_ptg_chn = THIS.qualified_classname_ptg_chn; %// bridge

  HEAD.qualified_classname_sym_chn = THIS.qualified_name_sym;          %// pass down
  SYNT.qualified_classname_sym_chn = THIS.qualified_classname_sym_chn; %// bridge

  %// add link for subclassing relation
  SYNT.subclass_relation_ptg = IF( INCLUDING (qualifiedName.yes, Extend.yes, ROOTCLASS.no)
                                 , PTGRelationSubclass(INCLUDING (qualifiedName.qualified_name_ptg, Extend.qualified_name_ptg, ROOTCLASS.ptgnull), THIS.qualified_name_ptg)
                                 , PTGNULL );
  
  SYNT.yes = 1;
END;

SYMBOL Message INHERITS qualifiedName END;
SYMBOL Enum    INHERITS qualifiedName END;
/* SYMBOL Extend  INHERITS qualifiedName END; /* TODO: some Eli error with overrides not recognized? */

SYMBOL Extend: yes: int SYNT;
SYMBOL Extend: qualified_name_ptg: PTGNode SYNT;
SYMBOL Extend: qualified_name_sym: int SYNT;
SYMBOL Extend: subclass_relation_ptg: PTGNode SYNT;
SYMBOL Extend COMPUTE
  /* must override in SYMBOL, not in RULE -- this workaround doesnt really work either */
  /*SYNT.qualified_name_ptg = PTGDotSeq(THIS.qualified_classname_ptg_chn, PTGId(THIS.messageType));*/
  SYNT.qualified_name_ptg = PTGSeq3(THIS.qualified_classname_ptg_chn
                                   , IF( INCLUDING (qualifiedName.yes, Extend.yes, ROOTCLASS.no)
                                       , PTGAsIs("$")
                                       , PTGAsIs("."))
                                   , PTGId(THIS.messageType));

  SYNT.qualified_name_sym = concat_id_with_dot( THIS.qualified_classname_sym_chn, THIS.messageType );

  %// refine class scope (although plantuml can handle only 1 level of scopes, we just hide the hierarchy)
  HEAD.qualified_classname_ptg_chn = THIS.qualified_name_ptg;          %// pass down
  SYNT.qualified_classname_ptg_chn = THIS.qualified_classname_ptg_chn; %// bridge

  HEAD.qualified_classname_sym_chn = THIS.qualified_name_sym;          %// pass down
  SYNT.qualified_classname_sym_chn = THIS.qualified_classname_sym_chn; %// bridge

  %// add link for subclassing relation
  SYNT.subclass_relation_ptg = IF( INCLUDING (qualifiedName.yes, Extend.yes, ROOTCLASS.no)
                                 , PTGRelationSubclass(INCLUDING (qualifiedName.qualified_name_ptg, Extend.qualified_name_ptg, ROOTCLASS.ptgnull), THIS.qualified_name_ptg)
                                 , PTGNULL );
  
  SYNT.yes = 1;
END;

/*PTGOut(PTGKRDebug(QUALNAME_PTG,IDN))*/


/*TODO: remove GetQualifiedName 
  ,IF(BindingInScope(ENV,THIS.full_name),ReportF(WARNING,COORDREF,"type already defined: '%s'", StringTable(T_IDN)),0)\
  ,ResetQualifiedName(KeyOf(BindingInScope(ENV, T_IDN)), QUALNAME_PTG)\
  ,ResetPackageName(KeyOf(BindingInScope(ENV, T_IDN)), PKG_IDN ) /* store package name with type definition

*/


/* CLASS SYMBOL TypeDef: full_name: int SYNT; /* deprecated */
CLASS SYMBOL TypeDef: def_key: DefTableKey SYNT;
CLASS SYMBOL TypeDef COMPUTE

  /* THIS.name will be unqualified */
  /* SYNT.full_name = concat_id_with_dot( INCLUDING ProtoDoc.package_name, THIS.name ); */


/* TODO: report coords of previous definition */
#define CHK_TYPE1(ENV, PKG_IDN, T_IDN)\
  IF( BindingInScope(GetPackageNameCandidates(KeyOf(BindingInScope(ENV, T_IDN)),NoEnv), PKG_IDN )\
     , ORDER( ReportF(WARNING,COORDREF,"type '%s' already defined in package '%s'", StringTable(T_IDN), StringTable(PKG_IDN)), 0)\
     , 1 )
#define DEF_TYPE1(ENV, PKG_IDN, T_IDN)\
  ORDER(1\
   /* register unqualified typename as key */\
  ,BindIdn(ENV,T_IDN)\
   /* ensure that dictionary of packages per typename is initialized */\
  ,UniquePackageNameCandidates(KeyInScope(ENV, T_IDN),NewEnv)\
   /* register package name into dictionary */\
  ,BindKey(GetPackageNameCandidates(KeyOf(BindingInScope(ENV, T_IDN)),NoEnv),PKG_IDN, THIS.def_key)\
  /* TODO */\
  /*,BindIdn(GetPackageNameCandidates(KeyInScope(ENV, T_IDN),NoEnv),PKG_IDN)*/\
  /* ensure that a list of candidates per typename_x_packagename is initialized */\
  /*,UniqueTypeInstCandidates(KeyInScope(GetPackageNameCandidates(KeyInScope(ENV, T_IDN),NoEnv),PKG_IDN),NullTYPEList)*/\
  /* insert key into type inst candidate list */\
  /*,AppElDefTableKeyList()*/\
  ,ENV)

#define CHK_TYPE(ENV, PKG_IDN, T_IDN)\
  IF( BindingInScope(ENV, THIS.qualified_name_sym)\
    , ORDER( ReportF(WARNING,COORDREF,"type '%s' already defined in package '%s' (%s)", StringTable(T_IDN), StringTable(PKG_IDN),StringTable(THIS.qualified_name_sym)), 0)\
    , 1 )

#define DEF_TYPE(ENV, PKG_IDN, T_IDN)\
  ORDER(1\
  ,BindKey(ENV, THIS.qualified_name_sym, THIS.def_key)\
  ,ENV)
  
  HEAD.custom_types_env_chn = IF( CHK_TYPE(THIS.custom_types_env_chn, INCLUDING ProtoDoc.package_name, THIS.name )
                                , DEF_TYPE(THIS.custom_types_env_chn, INCLUDING ProtoDoc.package_name, THIS.name )
                                , THIS.custom_types_env_chn );
#undef DEF_TYPE1
#undef CHK_TYPE1

  

#define FLIP(F,X,Y) F(Y,X)
  SYNT.def_key = FLIP(KResetPos, COORDREF,
                 /*FLIP(KResetFullName, THIS.full_name,*/
                 FLIP(KResetQualifiedName, THIS.qualified_name_ptg,
                 NewKey()));
#undef FLIP
  %// property "PackageNameCandidates" contains another Env with package names as keys
  %// check if there is a type with the same name defined in the same namespace

  /* TODO: tell me where duplicate names are defined */
  /* TODO: refine double definition check by considering package name */
  /* TODO: allow multiple names for different packages,
   * but warn for multiple names for same packages */
  /* GetPackageName(KeyOf(BindingInScope(ENV, IDN)), 0)
   * TODO: store fully qualified type name in Env
   */
END;

SYMBOL Message INHERITS TypeDef END;
SYMBOL Enum    INHERITS TypeDef END;
/*SYMBOL Extend  INHERITS TypeDef END; TODO: is this so? What about THIS.name? */



/* Caveat: Duplicate bindings of a Key return NoKey */

RULE rMessage: Message ::= MessageName MessageBody COMPUTE
  /* declares a new type of .name */
  Message.name = MessageName.sym;
END;
SYMBOL Message COMPUTE
  /*printf("DEBUG: looking at message %s\n",StringTable(THIS.name));*/
  /* pass empty chain down, let subtree fill it  */
  HEAD.puml_fields_ptg_chn = PTGNULL;
  /* bridge fields over subtree, in case of nested messages */
  SYNT.puml_fields_ptg_chn = THIS.puml_fields_ptg_chn;

  /* SYNT.puml_ptg_chn = PTGNlSeq(TAIL.puml_ptg_chn, PTGClass(THIS.name, TAIL.puml_fields_ptg_chn)); */
  /*SYNT.puml_ptg_chn = PTGNlSeq(TAIL.puml_ptg_chn, PTGClass(THIS.qualified_name_ptg, TAIL.puml_fields_ptg_chn));*/
  /*SYNT.puml_ptg_chn = PTGNlSeq(TAIL.puml_ptg_chn, PTGClass(PTGId(THIS.full_name), TAIL.puml_fields_ptg_chn));*/
  SYNT.puml_ptg_chn = PTGNlSeq(TAIL.puml_ptg_chn, PTGClass(THIS.qualified_name_ptg, THIS.name, TAIL.puml_fields_ptg_chn));

  /* moved to TypeDef */
  /*HEAD.custom_types_env_chn = DEF_TYPE(THIS.custom_types_env_chn, THIS.name, THIS.qualified_name_ptg);*/

END;


RULE rEnum: Enum ::= EnumName EnumBody COMPUTE
  Enum.name = EnumName.sym;
END;
SYMBOL Enum COMPUTE
  %// pass empty chain down, let subtree fill it 
  HEAD.puml_fields_ptg_chn = PTGNULL;
  %// bridge fields over subtree, in case of nested messages
  SYNT.puml_fields_ptg_chn = THIS.puml_fields_ptg_chn;

  %// bridge over subtree
  /* SYNT.puml_ptg_chn = PTGNlSeq(TAIL.puml_ptg_chn, PTGEnum(THIS.name, TAIL.puml_fields_ptg_chn));*/
  /*SYNT.puml_ptg_chn = PTGNlSeq(TAIL.puml_ptg_chn, PTGEnum(THIS.qualified_name_ptg, TAIL.puml_fields_ptg_chn));*/
  /*SYNT.puml_ptg_chn = PTGNlSeq(TAIL.puml_ptg_chn, PTGEnum(PTGId(THIS.full_name), TAIL.puml_fields_ptg_chn));*/
  SYNT.puml_ptg_chn = PTGNlSeq(TAIL.puml_ptg_chn, PTGEnum(THIS.qualified_name_ptg, THIS.name, TAIL.puml_fields_ptg_chn));

  /* moved to TypeDef */
  /*HEAD.custom_types_env_chn = DEF_TYPE(THIS.custom_types_env_chn, THIS.name, THIS.qualified_name_ptg);*/

END;

SYMBOL Extend: messageType: int SYNT;
RULE rExtend: Extend ::= MessageType ExtendBody COMPUTE
  Extend.messageType = MessageType.sym;
END;

%// root class for contributions to chain puml_relations_ptg_chn
CLASS SYMBOL contributesRelation: field_relation_ptg:    PTGNode SYNT;  %// is PTGNULL if type is primitve
/*CLASS SYMBOL contributesRelation: subclass_relation_ptg: PTGNode SYNT;*/
CLASS SYMBOL contributesRelation: contrib_relation_ptg:  PTGNode SYNT;
CLASS SYMBOL contributesRelation COMPUTE
  SYNT.puml_relations_ptg_chn =
    PTGNlSeq(TAIL.puml_relations_ptg_chn, THIS.contrib_relation_ptg );
    /*PTGNlSeq(THIS.field_relation_ptg,
             THIS.subclass_relation_ptg));*/

  SYNT.contrib_relation_ptg = PTGNlSeq(THIS.field_relation_ptg, PTGNULL /*THIS.subclass_relation_ptg*/);
  /*PTGOut(PTGNlSeq(THIS.contrib_relation_ptg,PTGAsIs("")));*/
    
  /*  PTGOut(PTGNlSeq(THIS.field_relation_ptg,PTGAsIs("")));
    PTGOut(PTGNlSeq(THIS.subclass_relation_ptg,PTGAsIs("")));
  */
  
  %// default contributions
  SYNT.field_relation_ptg = PTGAsIs("none");
  /*SYNT.subclass_relation_ptg = PTGAsIs("noneclass");*/

END;

CLASS SYMBOL contributesField INHERITS contributesRelation END; %// can't have multiple inheritance
CLASS SYMBOL contributesField: field_ptg: PTGNode SYNT;
CLASS SYMBOL contributesField: field_relation_ptg: PTGNode SYNT; %// redundant
CLASS SYMBOL contributesField COMPUTE
  %// contribution to chain
  %// add a type relation of parent uses fieldtype
  SYNT.puml_fields_ptg_chn =
    PTGNlSeq(TAIL.puml_fields_ptg_chn, THIS.field_ptg);
END;

SYMBOL Field INHERITS contributesField END;
SYMBOL Map   INHERITS contributesField END;
SYMBOL OneOf INHERITS contributesField END;
%// OneOfField does NOT INHERITS contributesField, because OneOf forms a wrapper around it


CLASS SYMBOL contributesSubclass /*INHERITS contributesRelation*/ END; %// can't have multiple inheritance
CLASS SYMBOL contributesSubclass: subclass_relation_ptg: PTGNode SYNT; %// redundant
CLASS SYMBOL contributesSubclass COMPUTE 
  SYNT.puml_relations_ptg_chn2 = PTGNlSeq(TAIL.puml_relations_ptg_chn2, THIS.subclass_relation_ptg ); %// here only TAIL compiles to _post, THIS compiles to _pre
END;

CLASS SYMBOL qualifiedName INHERITS contributesSubclass END;
      SYMBOL Extend        INHERITS contributesSubclass END;

%// get qualfied name; if none found, default to key as type
%// TODO: recognized already-qualified names being used as keys
#define lazy_GetQualifiedName(KEY,DFLT_SYM,PKG_SYM,MESG) \
  IF( HasQualifiedName(KEY)\
    , GetQualifiedName(KEY,PTGNULL)\
    , ORDER(ReportF(NOTE,COORDREF,MESG,StringTable(DFLT_SYM),StringTable(PKG_SYM)),\
            PTGId(DFLT_SYM))\
    )

RULE rField: Field ::= Label FieldType FieldName FieldNumber FieldOptions COMPUTE
  %// label can be empty in v3

  Field.field_ptg = PTGField(FieldName.sym, FieldType.sym, PTGId(Label.sym));

  %// TODO: do something with Field default in optional fields ?
  %// Field.field_ptg = PTGFieldWithDefault(FieldName.sym, FieldType.sym, PTGAsIs("optional"), FieldDefault.sym);

  %// collect use-def relations between fields and message/enum/group definitions
  %// no name analysis carried out; we assume that FieldType.sym is defined
  Field.field_relation_ptg =
    IF( FieldType.is_custom
      /*, PTGRelationUsing(INCLUDING (Message.name, Extend.messageType), FieldType.sym, PTGId(Label.sym))*/
      , PTGRelationUsing(INCLUDING (Message.qualified_name_ptg, Extend.qualified_name_ptg),
                         /*GetQualifiedName(FieldType.custom_type_key, DEFAULT_SYM("unresolved field type '%s'", FieldType.sym)), %// default to unresolved name*/
                         lazy_GetQualifiedName(FieldType.custom_type_key, FieldType.sym, INCLUDING ProtoDoc.package_name, "unresolved field type '%s' in package '%s'"), %// default to unresolved name
                         PTGId(Label.sym))
      , PTGNULL );
END;

%// enum fields have special visualization im PUML
RULE rEnumField: EnumField ::= EnumFieldName FieldNumber EnumFieldOptions COMPUTE
  EnumField.puml_fields_ptg_chn =
    PTGNlSeq(EnumField.puml_fields_ptg_chn, PTGEnumItem(EnumFieldName.sym));
END;

RULE rMap: Map ::= MapKeyType MapValType MapName FieldNumber FieldOptions COMPUTE
  
    Map.field_ptg = PTGMapField(MapName.sym, MapKeyType.sym, MapValType.sym);

    Map.field_relation_ptg =
      IF( MapValType.is_custom
        /*, PTGRelationUsing(INCLUDING (Message.name, Extend.messageType), MapValType.sym, PTGAsIs("map value"))*/
        , PTGRelationUsing(INCLUDING (Message.qualified_name_ptg, Extend.qualified_name_ptg),
                           lazy_GetQualifiedName(MapValType.custom_type_key, MapValType.sym, INCLUDING ProtoDoc.package_name, "unresolved map value type '%s' in package '%s'"), %// default to unresolved name
                           PTGAsIs("map value"))
        , PTGNULL );
END;

%// OneOf is a union field within a Message
RULE rOneOf: OneOf ::= OneOfName OneOfBody COMPUTE 

  OneOf.name = OneOfName.sym;

  OneOf.field_ptg = PTGOneOf(OneOfName.sym, CONSTITUENTS OneOfField.field_ptg WITH (PTGNode,PTGNlSeq,IDENTICAL,PTGNull));

  OneOf.field_relation_ptg = CONSTITUENTS OneOfField.field_relation_ptg WITH (PTGNode,PTGNlSeq,IDENTICAL,PTGNull);
END;

%// OneOfField is a variant (sub-field) within a OneOf union field
SYMBOL OneOfField: field_ptg: PTGNode SYNT;
SYMBOL OneOfField: field_relation_ptg: PTGNode SYNT;
RULE rOneOfField: OneOfField ::= FieldType FieldName FieldNumber FieldOptions COMPUTE 

  OneOfField.field_ptg = PTGField(FieldName.sym, FieldType.sym, PTGNULL);

  %// oneof variants may be custom types
  OneOfField.field_relation_ptg = 
    IF ( FieldType.is_custom
       /*, PTGRelationUsing( INCLUDING (Message.name, Extend.messageType), FieldType.sym, PTGoneofVariant(INCLUDING OneOf.name))*/
       , PTGRelationUsing( INCLUDING (Message.qualified_name_ptg, Extend.qualified_name_ptg),
                           lazy_GetQualifiedName(FieldType.custom_type_key, FieldType.sym, INCLUDING ProtoDoc.package_name, "unresolved oneof field type '%s' in package '%s'"), %// default to unresolved name
                           PTGoneofVariant(INCLUDING OneOf.name))
       , PTGNULL
       );
END;
#undef lazy_GetQualifiedName

CLASS SYMBOL hasSym: sym: int SYNT;
SYMBOL ident INHERITS hasSym COMPUTE /* TODO: make a Nonterminal */
  SYNT.sym = TERM;
END;

CLASS SYMBOL derivedFromIdent INHERITS hasSym COMPUTE
  SYNT.sym=CONSTITUENT ident.sym;
END;
  
SYMBOL MessageName   INHERITS hasSym, derivedFromIdent END;
SYMBOL EnumName      INHERITS hasSym, derivedFromIdent END;
SYMBOL FieldName     INHERITS hasSym, derivedFromIdent END;
SYMBOL EnumItemName  INHERITS hasSym, derivedFromIdent END;
SYMBOL EnumFieldName INHERITS hasSym, derivedFromIdent END;
SYMBOL MapKeyType    INHERITS hasSym COMPUTE SYNT.sym=CONSTITUENT PrimitiveType.sym; END;
SYMBOL MapValType    INHERITS hasSym COMPUTE SYNT.sym=CONSTITUENT FieldType.sym; END;
SYMBOL MapName       INHERITS hasSym, derivedFromIdent END;
SYMBOL OneOfName     INHERITS hasSym, derivedFromIdent END;
SYMBOL PrimitiveType INHERITS hasSym END; %// computed below

SYMBOL PackageName INHERITS hasSym COMPUTE
  SYNT.sym = CONSTITUENTS ident.sym WITH(int,concat_id_with_dot,IDENTICAL,ZERO);
END;

SYMBOL MessageType   INHERITS hasSym COMPUTE
  SYNT.sym =
    concat_id( CONSTITUENT DotOrNot.sym, /* prepend optional dot */
               CONSTITUENTS ident.sym WITH(int,concat_id_with_dot,IDENTICAL,ZERO) );
END;

SYMBOL Label         INHERITS hasSym END;
RULE rLabel_empty:    Label ::=            COMPUTE Label.sym = ensure_idn("(optional)"); END; /* empty label in v3 defaults to optional */
RULE rLabel_required: Label ::= 'required' COMPUTE Label.sym = ensure_idn("required"); END;
RULE rLabel_optional: Label ::= 'optional' COMPUTE Label.sym = ensure_idn("optional"); END;
RULE rLabel_repeated: Label ::= 'repeated' COMPUTE Label.sym = ensure_idn("repeated"); END;

SYMBOL FieldType     INHERITS hasSym END;
RULE rFieldType_is_prim: FieldType ::= PrimitiveType COMPUTE 
  FieldType.sym = PrimitiveType.sym;
  %//FieldType.is_custom = 0;
END;

RULE rFieldType_is_message: FieldType ::= MessageType COMPUTE
  FieldType.sym = MessageType.sym;
  %//FieldType.is_custom = 1;
END;

SYMBOL DotOrNot INHERITS hasSym END;
RULE rDot:    DotOrNot ::= '.' COMPUTE DotOrNot.sym = ensure_idn("."); END;
RULE rNotDot: DotOrNot ::=     COMPUTE DotOrNot.sym = 0; END;


RULE rPrimitiveType_int32:    PrimitiveType ::= 'int32'    COMPUTE PrimitiveType.sym=ensure_idn("int32");    END;
RULE rPrimitiveType_int64:    PrimitiveType ::= 'int64'    COMPUTE PrimitiveType.sym=ensure_idn("int64");    END;
RULE rPrimitiveType_uint32:   PrimitiveType ::= 'uint32'   COMPUTE PrimitiveType.sym=ensure_idn("uint32");   END;
RULE rPrimitiveType_uint64:   PrimitiveType ::= 'uint64'   COMPUTE PrimitiveType.sym=ensure_idn("uint64");   END;
RULE rPrimitiveType_sint32:   PrimitiveType ::= 'sint32'   COMPUTE PrimitiveType.sym=ensure_idn("sint32");   END;
RULE rPrimitiveType_sint64:   PrimitiveType ::= 'sint64'   COMPUTE PrimitiveType.sym=ensure_idn("sint64");   END;
RULE rPrimitiveType_fixed32:  PrimitiveType ::= 'fixed32'  COMPUTE PrimitiveType.sym=ensure_idn("fixed32");  END;
RULE rPrimitiveType_fixed64:  PrimitiveType ::= 'fixed64'  COMPUTE PrimitiveType.sym=ensure_idn("fixed64");  END;
RULE rPrimitiveType_sfixed32: PrimitiveType ::= 'sfixed32' COMPUTE PrimitiveType.sym=ensure_idn("sfixed32"); END;
RULE rPrimitiveType_sfixed64: PrimitiveType ::= 'sfixed64' COMPUTE PrimitiveType.sym=ensure_idn("sfixed64"); END;
RULE rPrimitiveType_bool:     PrimitiveType ::= 'bool'     COMPUTE PrimitiveType.sym=ensure_idn("bool");     END;
RULE rPrimitiveType_float:    PrimitiveType ::= 'float'    COMPUTE PrimitiveType.sym=ensure_idn("float");    END;
RULE rPrimitiveType_double:   PrimitiveType ::= 'double'   COMPUTE PrimitiveType.sym=ensure_idn("double");   END;
RULE rPrimitiveType_string:   PrimitiveType ::= 'string'   COMPUTE PrimitiveType.sym=ensure_idn("string");   END;
RULE rPrimitiveType_bytes:    PrimitiveType ::= 'bytes'    COMPUTE PrimitiveType.sym=ensure_idn("bytes");    END;


CLASS SYMBOL TypeUse: is_custom: int /*Binding*/ SYNT;
CLASS SYMBOL TypeUse: custom_type_key: DefTableKey SYNT;
CLASS SYMBOL TypeUse: type_basename: int SYNT;
CLASS SYMBOL TypeUse: type_package : int SYNT;
CLASS SYMBOL TypeUse COMPUTE
  %// From the spec (https://developers.google.com/protocol-buffers/docs/proto#packages-and-name-resolution):
  %// Type name resolution in the protocol buffer language works like C++: 
  %// first the innermost scope is searched, then the next-innermost, and so on,
  %// with each package considered to be "inner" to its parent package.
  %// A leading '.' (for example, .foo.bar.Baz) means to start from the outermost scope instead.

  /* example lookup "X.Y":
   * if current class is Package.Subpackage.Class.Subclass
   * 1. search for Package.Subpackage.Class.Subclass.X.Y
   * 2. search for Package.Subpackage.Class.X.Y
   * 3. search for Package.Subpackage.X.Y
   * 4. search for Package.X.Y
   * 5. search for X.Y
   *
   * example lookup ".X.Y":
   * if current class is Package.Subpackage.Class.Subclass
   * 1. search for X.Y
   * 2. search for Package.X.Y
   * 3. search for Package.Subpackage.X.Y
   * 4. search for Package.Subpackage.Class.X.Y
   * 5. search for Package.Subpackage.Class.Subclass.X.Y
   *
   * THIS.sym may contain dots, even a leading dot
   */
  SYNT.custom_type_key = IF( THIS.is_custom, KeyOf(lookup_class_in_typedict( INCLUDING ROOTCLASS.custom_types, THIS.qualified_classname_sym_chn, THIS.sym )), NoKey);

  %// every non-primitive type (i.e. synthesized from ident, not from PrimitiveType) is custom
  SYNT.is_custom = CONSTITUENTS ident.sym WITH (int,ADD,IDENTICAL,ZERO);

  %// type name may be given qualified or unqualified
  %// split off type name after last dot
  SYNT.type_basename = IF( strrchr(StringTable(THIS.sym), '.')
                         , ensure_idn(ADD(1,strrchr(StringTable(THIS.sym), '.')))
                         , THIS.sym );

  %// if qualified, take everything before the rightmost dot
  %// if unqualified, assume the type must be found in the current package
  SYNT.type_package = IF( strrchr(StringTable(THIS.sym), '.')
                        , ensure_nidn(StringTable(THIS.sym), SUB( strrchr(StringTable(THIS.sym), '.'), StringTable(THIS.sym)) )
                        , INCLUDING ProtoDoc.package_name );




/*
XA(A,
XA(F,B,
XA(G,C,
XA(H,D))))

->

H(G(F(A,B),C),D)
*/

  %// lookup custom type, or NoKey
  %// 1. lookup by type name (e.g. Body)
  %// 2. lookup by package name (e.g. "Package.Subpackage" in Package.Subpackage.Body )
  %// 3. lookup by inner class hierarchy (e.g. "Request" in Pack.Sub.Request$Body )
  /*SYNT.custom_type_key = KeyOf(BindingInEnv(INCLUDING ROOTCLASS.custom_types, THIS.sym));*/
  /*
  SYNT.custom_type_key =  KeyInScope(
                            GetPackageNameCandidates(
                              KeyInScope(
                                INCLUDING ROOTCLASS.custom_types
                              , THIS.type_basename)
                            , NoEnv)
                          , THIS.type_package);
  */
/*
#define APP1(S,F,FA)                     F(FA,S)
#define APP2(S,F,FA,G,GA)           G(GA,F(FA,S))
#define APP3(S,F,FA,G,GA,H,HA) H(HA,G(GA,F(FA,S)))

#define APP2(S,F,FA,G,GA)           APP1(F(FA,S),G,GA)
#define APP3(S,F,FA,G,GA,H,HA) H(HA,APP2(S,F,FA,G,GA))
#define APP3(S,F,FA,G,GA,H,HA) APP1(APP2(S,F,FA,G,GA),F,FA)
#define APP3(S,F,FA,G,GA,H,HA) APP1(APP1(APP1(S,F,FA),G,GA),F,FA)



APP1(APP1(APP1( INCLUDING ROOTCLASS.custom_types
  , KeyInScope, THIS.type_basename)
  , GetPackageNameCandidates, NoEnv)
  , KeyInScope, THIS.type_package)
/*


#define APP(F,A,NEXT_G) NEXT_G(F(A))

ist: APP(G,B)(F,A)

soll: H(C,G(B,F(A,A0)))


  APP(KeyInScope, THIS.type_basename,
  APP(GetPackageNameCandidates, NoEnv,
  APP(KeyInScope, THIS.type_package,
  INCLUDING ROOTCLASS.custom_types )));
*/


  %// warn in specific use siutations
  %//IF( THIS.custom_type_key, 0, ReportF(WARNING,COORDREF,"unresolved type '%s'", StringTable(THIS.sym)) );

END;

SYMBOL FieldType  INHERITS TypeUse END;
SYMBOL MapValType INHERITS TypeUse END;
