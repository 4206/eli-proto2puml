@=~
~p maximum_input_line_length = infinity
~p maximum_output_line_length = infinity

~O~<lookup_class_in_typedict.fw~>==~{
util/ropes.fw
~}

~O~<lookup_class_in_typedict.head~>==~{
#include "lookup_class_in_typedict.h"

~}

~O~<lookup_class_in_typedict.h~>==~{
#ifndef LOOKUP_CLASS_IN_TYPEDICT
#define LOOKUP_CLASS_IN_TYPEDICT

#include "envmod.h"

/** Classname may contain dots.
 * If the classname starts with a dot, search will start top-down,
 * otherwise default to bottom-up
 *
 * From the spec (https://developers.google.com/protocol-buffers/docs/proto#packages-and-name-resolution):
 * Type name resolution in the protocol buffer language works like C++: 
 * first the innermost scope is searched, then the next-innermost, and so on,
 * with each package considered to be "inner" to its parent package.
 * A leading '.' (for example, .foo.bar.Baz) means to start from the outermost scope instead.
 *
 * example lookup "X.Y":
 * if current class is Package.Subpackage.Class.Subclass
 * 1. search for Package.Subpackage.Class.Subclass.X.Y
 * 2. search for Package.Subpackage.Class.X.Y
 * 3. search for Package.Subpackage.X.Y
 * 4. search for Package.X.Y
 * 5. search for X.Y
 *
 * example lookup ".X.Y":
 * if current class is Package.Subpackage.Class.Subclass
 * 1. search for X.Y
 * 2. search for Package.X.Y
 * 3. search for Package.Subpackage.X.Y
 * 4. search for Package.Subpackage.Class.X.Y
 * 5. search for Package.Subpackage.Class.Subclass.X.Y
 *
 */
extern Binding lookup_class_in_typedict( Environment env, int path, int classname );

#endif // LOOKUP_CLASS_IN_TYPEDICT

~}

~O~<lookup_class_in_typedict.c~>==~{
#include "lookup_class_in_typedict.h"
#include <stdio.h>
#include "csm.h" // extern char* StringTable( int i )
#include "ropes.h"

#define PDEBUG3(X)

Binding full_match_with( Environment env, char* full_type );
Binding match_bindings_with( Environment env, char* prefix, char* suffix ); // forward decl

Binding lookup_class_in_typedict( Environment env, int prefix, int suffix )
{
PDEBUG3(fprintf(stderr,"LOOKUP pre=%s suf=%s\n",StringTable(prefix),StringTable(suffix)));

  if (suffix == 0) return NoBinding;

  Binding res = NoBinding;

  // split classname into segments

  // search for all types that start with prefix and end with suffix
  // depending on direction of refinement: shorten or extend prefix
  // until exactly 1 match is found
  // if multiple matches are found after shortening (extending) the prefix by 1 step, then the type dict is erroneous

  int suffix_starts_with_dot = startswith(StringTable(suffix), "."); // reverse refinement direction if type starts with a dot
  int top_down = suffix_starts_with_dot;

  // prefix type with a dot if there is none, so we don't confuse "Status" with "ProzessStatus"
  int suf_len = strlen(StringTable(suffix))+1; // +1 term, +1 extra dot
  char suf_str[suf_len]; 
  char dot_suf_str[suf_len+1];
  if (suffix_starts_with_dot)
  { 
    snprintf( suf_str    , suf_len-1, "%s", StringTable(suffix)+1 ); // skip leading dot
    snprintf( dot_suf_str, suf_len  , "%s", StringTable(suffix)   ); // keep leading dot
  }
  else
  { 
    snprintf( suf_str    , suf_len  ,  "%s", StringTable(suffix) ); // keep without dot
    snprintf( dot_suf_str, suf_len+1, ".%s", StringTable(suffix) ); // insert leading dot
  }
  //fprintf(stderr, ">'%s' >>'%s'\n", StringTable(suffix), suf_str);

  // strtok will modify its first argument (WTF?) therefore we need a copy 
  //char* pre_str = StringTable(prefix);
  int pre_len = strlen(StringTable(prefix))+1; // +1 term
  char pre_str[pre_len];
  snprintf( pre_str, pre_len, "%s", StringTable(prefix) );
  
  char pre_buf[pre_len]; // working buffer for prefix incremenets


  // split prefix into segments along dot
  int n_pre_segs = cntchr(pre_str , '.') + 1;
  char* pre_seg[n_pre_segs];

  char* delimiter = "."; 
  char *ptr;
  int i;
  for( i=0, ptr = strtok(pre_str, delimiter); ptr != NULL; ptr = strtok(NULL, delimiter) )
  { pre_seg[i++] = ptr; }

  // check if there is a full match before trying approximate matches
PDEBUG3(fprintf(stderr,"pre=%s suf=%s 1\n", StringTable(prefix), StringTable(suffix) ));
  res = full_match_with( env, suf_str );
  if (res) { 
PDEBUG3(fprintf(stderr,"pre=%s suf=%s 1match with %s\n", StringTable(prefix), StringTable(suffix), StringTable(IdnOf(res)) ));
    return res; }
  
  int nsegs_used;
  if (top_down)
  {
    pre_buf[0] = 0; // start with empty prefix INSIDE the space already allocated (for re-building it step-by-step)

    for(nsegs_used = 0; nsegs_used <= n_pre_segs; nsegs_used++ )
    {
      // build a new prefix from the first n segments
      concat_n(pre_buf, pre_seg, ".", nsegs_used);

      res = match_bindings_with( env, pre_buf, dot_suf_str );

      // abort if a matching type was found
      if (res) { return res; }
    }
    return NoBinding;
  }
  else
  {
PDEBUG3(fprintf(stderr,"pre=%s suf=%s 2\n", StringTable(prefix), StringTable(suffix) ));
    for(nsegs_used = n_pre_segs; nsegs_used >= 0; nsegs_used-- )
    {
      // build a new prefix from the first n segments
      concat_n( pre_buf, pre_seg, ".", nsegs_used );
PDEBUG3(fprintf(stderr,"pre=%s suf=%s pre_buf=%s dot_suf=%s 2+\n", StringTable(prefix), StringTable(suffix), pre_buf, dot_suf_str ));
      res = match_bindings_with( env, pre_buf, dot_suf_str );
PDEBUG3(fprintf(stderr,"pre=%s suf=%s pre_buf=%s '%s'\n", StringTable(prefix), StringTable(suffix), pre_buf, StringTable(IdnOf(res)) ));
      // abort if a matching type was found
      if (res) { return res; }
    }
  }
}

Binding match_bindings_with( Environment env, char* prefix, char* suffix )
{
  Binding res = NoBinding;
  // search through all the fully qualified type names
  for (Binding b= DefinitionsOf(env); b; b=NextDefinition(b))
  {
    const char* cand_name = StringTable(IdnOf(b));
PDEBUG3(fprintf(stderr,"pre=%s suf=%s cand=%s startswith=%d endswith=%d\n", prefix, suffix, cand_name,startswith(cand_name, prefix),endswith(cand_name,suffix)));
    if (startswith(cand_name, prefix) && endswith(cand_name, suffix))
    {
      // always prefer a shorter fully qualified typename
      if (res==NoBinding || strlen(cand_name) < strlen(StringTable(IdnOf(res))))
      {
        res = b;
      }
    }
  }
  return res;
}

Binding full_match_with( Environment env, char* full_type )
{
  Binding res = NoBinding;
  for (Binding b= DefinitionsOf(env); b; b=NextDefinition(b))
  {
    const char* cand_name = StringTable(IdnOf(b));
    if (0 == strcmp(cand_name, full_type))
    {
      return b;
    }
  }
  return res;
}

~}
